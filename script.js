// script.js ‚Äî —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /api/user
console.log('‚úÖ script.js –∑–∞–≥—Ä—É–∂–µ–Ω');

const urlParams = new URLSearchParams(window.location.search);
const userId = urlParams.get('user_id');

if (!userId) {
  document.body.innerHTML = '<h2>‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω user_id</h2>';
  throw new Error('user_id not provided');
}

async function loadUserData() {
  try {
    console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');

    // –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–∞—à API (–Ω–∞ Vercel)
    const response = await fetch(`/api/user?user_id=${userId}`);
    const userData = await response.json();

    if (response.status === 400) {
      document.body.innerHTML = '<h2>‚ùå –û—à–∏–±–∫–∞: user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω</h2>';
      return;
    }

    if (response.status === 500) {
      document.body.innerHTML = `<h2>‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${userData.error}</h2>`;
      return;
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', userData);

    document.getElementById('faction').textContent = userData.faction;
    document.getElementById('mana').textContent = userData.mana;
    document.getElementById('crystals').textContent = userData.crystals;

    const grid = document.getElementById('city-grid');
    grid.innerHTML = '';
    for (let i = 0; i < 49; i++) {
      const cell = document.createElement('div');
      cell.className = 'cell';
      cell.dataset.index = i;
      cell.addEventListener('click', () => onCellClick(cell, userData));
      grid.appendChild(cell);
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', e);
    document.body.innerHTML = `<h2>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}</h2>`;
  }
}

loadUserData();

function onCellClick(cell, userData) {
  if (cell.classList.contains('built')) {
    alert('–ó–¥–µ—Å—å —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ!');
    return;
  }

  if (userData.crystals < 50) {
    alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!');
    return;
  }

  if (confirm('–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –º–∞–Ω—ã –∑–∞ 50 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤?')) {
    buildStructure(cell, userData);
  }
}

async function buildStructure(cell, userData) {
  cell.classList.add('built', 'mana-collector');
  cell.textContent = '–ú';

  const newCrystals = userData.crystals - 50;
  const newMana = userData.mana + 10;

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
  const response = await fetch(`/api/user`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      user_id: userData.id,
      crystals: newCrystals,
      mana: newMana
    })
  });

  const result = await response.json();

  if (response.ok) {
    document.getElementById('crystals').textContent = newCrystals;
    document.getElementById('mana').textContent = newMana;
    alert('‚úÖ –ó–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ!');
  } else {
    alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!');
    cell.classList.remove('built', 'mana-collector');
    cell.textContent = '';
    console.error(result.error);
  }
}

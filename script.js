// script.js

console.log('‚úÖ script.js –∑–∞–≥—Ä—É–∂–µ–Ω');
console.log('supabase:', supabase); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Supabase –¥–æ—Å—Ç—É–ø–µ–Ω

// –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ URL
const urlParams = new URLSearchParams(window.location.search);
const userId = urlParams.get('user_id');

console.log('üîç user_id –∏–∑ URL:', userId);

if (!userId) {
  document.body.innerHTML = '<h2>‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω user_id</h2>';
  throw new Error('user_id not provided');
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
async function loadUserData() {
  try {
    console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase...');

    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', parseInt(userId))
      .single();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Supabase:', error);
      document.body.innerHTML = `<h2>‚ùå –û—à–∏–±–∫–∞: ${error.message}</h2>`;
      return;
    }

    if (!data) {
      console.warn('‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ');
      document.body.innerHTML = '<h2>‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –±–æ—Ç–µ.</h2>';
      return;
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.getElementById('faction').textContent = data.faction;
    document.getElementById('mana').textContent = data.mana;
    document.getElementById('crystals').textContent = data.crystals;

    // –°–æ–∑–¥–∞—ë–º —Å–µ—Ç–∫—É
    const grid = document.getElementById('city-grid');
    grid.innerHTML = '';
    for (let i = 0; i < 49; i++) {
      const cell = document.createElement('div');
      cell.className = 'cell';
      cell.dataset.index = i;
      cell.addEventListener('click', () => onCellClick(cell, data));
      grid.appendChild(cell);
    }

  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ loadUserData:', e);
    document.body.innerHTML = `<h2>‚ùå –û—à–∏–±–∫–∞: ${e.message}</h2>`;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
loadUserData();

function onCellClick(cell, userData) {
  if (cell.classList.contains('built')) {
    alert('–ó–¥–µ—Å—å —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ!');
    return;
  }

  if (userData.crystals < 50) {
    alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!');
    return;
  }

  if (confirm('–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –º–∞–Ω—ã –∑–∞ 50 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤?')) {
    buildStructure(cell, userData);
  }
}

async function buildStructure(cell, userData) {
  cell.classList.add('built', 'mana-collector');
  cell.textContent = '–ú';

  const newCrystals = userData.crystals - 50;
  const newMana = userData.mana + 10;

  const { error } = await supabase
    .from('users')
    .update({ crystals: newCrystals, mana: newMana })
    .eq('id', userData.id);

  if (error) {
    alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!');
    console.error(error);
    cell.classList.remove('built', 'mana-collector');
    cell.textContent = '';
  } else {
    document.getElementById('crystals').textContent = newCrystals;
    document.getElementById('mana').textContent = newMana;
    alert('‚úÖ –ó–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ!');
  }
}